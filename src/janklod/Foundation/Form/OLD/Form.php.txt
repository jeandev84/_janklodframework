<?php
namespace Jan\Foundation\Form;


use Jan\Component\Form\Resolver\DataResolver;
use Jan\Component\Form\Resolver\OptionResolver;
use Jan\Component\Form\Traits\FormTrait;
use Jan\Component\Form\Type\Support\BaseType;
use Jan\Component\Form\Type\TextType;
use Jan\Component\Http\Request;
use Jan\Contract\Form\FormBuilderInterface;



/**
 * Class Form
 * @package Jan\Foundation\Form
*/
class Form implements FormBuilderInterface
{

    use FormTrait;


    /**
     * @var array
    */
    protected $vars = [
        'parent'      => null, // must be a form
        'children'    => [],
        /* 'multiple'    => false, */
        'mapped'      => true,
        'html'        => [],
        'data_class'  => null,
        'data'        => null,
        'is_valid'    => false,
        'submitted'   => false,
        'constraints' => []
    ];



    /**
     * Form constructor.
     *
     * @param $data
    */
    public function __construct($data = null)
    {
        if($data) {
            $this->setVars(compact('data'));
            $this->setVar('data_class', \get_class($data));
        }

        // validator: $validator = new Validator($data);
    }


    /**
     * @param Request $request
     * @throws \ReflectionException
    */
    public function handle(Request $request)
    {
        $data = null;

        if(\in_array($request->getMethod(), ['POST', 'PUT', 'DELETE', 'PATCH'])) {

            $data = $request->request->all();
            if($files = $request->files->all()) {
                $data = array_merge($data, $files);
            }

            if($method = $request->request->get('_method')) {
                $request->setMethod($method);
            }
        }

        if ($request->getMethod() === 'GET') {
            $data = $request->queryParams->all();
        }

        if($data) {
            if($dataClass = $this->getVar('data_class')) {

                try {
                    $reflectionClass = new \ReflectionClass($dataClass);
                } catch (\ReflectionException $e) {
                     throw $e;
                }

                $properties = $reflectionClass->getProperties();
                foreach (array_keys($properties) as $key) {
                    if($this->getVar('mapped')) {
                        if(! \array_key_exists($key, $data)) {
                            throw new \Exception($key .' cannot be mapped from class '. $dataClass);
                        }
                    }
                }

                $this->setVar('submitted', true);
            }


            // Validation
            $this->setVar('is_valid', true);
        }
    }



    /**
     * @param string $path
     * @param string $method
     * @param array $attrs
    */
    public function start(string $path = '/', string $method = "POST", array $attrs = [])
    {
        $str = $this->makeAttributes($attrs);
        /* ob_start(); */
        $this->vars['html'][] = '<form action="'. $path .'" method="'. $method .'" '. $attrs .'>';
        $this->started = true;
    }


    /**
     * @param array $vars
    */
    public function setVars(array $vars)
    {
        $this->vars = array_merge($this->vars, $vars);
    }


    /**
     * @param $key
     * @param $value
     * @return Form
    */
    public function setVar($key, $value)
    {
        $this->vars[$key] = $value;

        return $this;
    }


    /**
     * @param $key
     * @param null $default
     * @return mixed
    */
    public function getVar($key, $default = null)
    {
         return $this->vars[$key] ?? $default;
    }



    /**
     * @param $name
     * @param BaseType $type
     * @return $this
    */
    public function setRow($name, BaseType $type): Form
    {
        $this->vars['children'][$name] = $type;

        return $this;
    }



    /**
     * @param string $formatHtml
     * @return $this
    */
    public function addFormat(string $formatHtml): Form
    {
        $this->vars['html'][] = $formatHtml;

        return $this;
    }



    /**
     * add form view items
     *
     * @param string $child
     * @param string|null $type
     * @param array $options
     * @return Form
     * @throws \Exception
    */
    public function add(string $child, ?string $type, array $options = []): Form
    {
        /*
        $resolver   = new OptionResolver($options);
        $formView = new FormView($child, $type, $resolver);
        */

        $resolver   = new OptionResolver($options);
        $row = new TextType($child, $resolver);

        if(! \is_null($type)) {
            $row = new $type($child, $resolver);
        }

        if($row instanceof BaseType) {
            $this->vars['children'][$child] = $row;
            $this->addFormat($row->build());
        }

        /* $this->vars['children'][] = $formView; */
        return $this;
    }


    /**
     * @return array
    */
    public function getRows(): array
    {
        return $this->vars['children'];
    }


    /**
     * @param string $child
     * @return mixed
     * @throws \Exception
    */
    public function getRow(string $child)
    {
        /* $this->createView(true); */
        if(! \array_key_exists($child, $this->getVar('children'))) {
            throw new \Exception('child ('. $child . ') has not defined row.');
        }

        /** @var BaseType $row */
        return $this->vars['children'][$child];
    }



    /**
     * @param string $child
     * @param array $options
     * @return string
     * @throws \Exception
    */
    public function createRow(string $child, array $options = []): string
    {
        $row = $this->getRow($child);
        $row->getOptionResolver()->setOptions($options);
        return $row->build();
    }



//    /**
//     * @param string|null $child
//     * @return mixed
//    */
//    public function getData(string $child = null): mixed
//    {
//        if ($child) {
//
//            $data = $this->vars[$child];
//            $resolver = new DataResolver($data);
//
//            if(\is_object($data)) {
//                //
//            }
//        }
//
//        if(\is_object($this->vars['data'])) {
//            return $this->vars['data'];
//        }
//
//        return null;
//    }


    /**
     * @return string
     */
    public function end()
    {
        $this->vars['html'][] = "</form>";

        if($this->started) {
            echo  $this->createView();
        }
    }



    /**
     * @param bool $disabled
     * @return string|null
    */
    public function createView(bool $disabled = false)
    {
        if($disabled === true) {
            return null;
        }

        return implode("\n", $this->vars['html']);
    }


    /**
     * @return bool
    */
    public function isSubmit(): bool
    {
         return $this->vars['submitted'];
    }


    /**
     * @return bool
    */
    public function isValid(): bool
    {
        return $this->vars['is_valid'];
    }
}